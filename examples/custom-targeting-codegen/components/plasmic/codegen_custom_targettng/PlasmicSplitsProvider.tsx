/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pKnDSUf6hHdKMbSuzompSH

import { getActiveVariation } from "@plasmicapp/react-web/lib/splits";
import * as React from "react";
import { ButtonTypeContextProvider } from "./PlasmicGlobalVariant__ButtonType"; // plasmic-import: C8lCX5Vidzec/globalVariant
import { ChromeContextProvider } from "./PlasmicGlobalVariant__Chrome"; // plasmic-import: Gf4pcnBTgIuU/globalVariant
import { GoogleSourceContextProvider } from "./PlasmicGlobalVariant__GoogleSource"; // plasmic-import: tAgF8lNmfePw/globalVariant

type GetActiveVariationParams = Partial<
  Parameters<typeof getActiveVariation>[0]
>;

export interface PlasmicSplitsProviderProps extends GetActiveVariationParams {
  children?: React.ReactNode;
}

export const splits = [
  {
    id: "D-zxmBLN4VIn",
    name: "Chrome",
    projectId: "pKnDSUf6hHdKMbSuzompSH",
    externalId: null,
    description: null,
    pagesPaths: ["/_splits/home"],
    type: "segment",
    slices: [
      { id: "2R9ka762TMYY", externalId: null, cond: {}, contents: [] },
      {
        id: "BSxoK9V9FPCy",
        externalId: null,
        cond: { and: [{ "==": [{ var: "browser" }, "Chrome"] }] },
        contents: [
          {
            type: "global-variant",
            projectId: "pKnDSUf6hHdKMbSuzompSH",
            groupId: "Gf4pcnBTgIuU",
            group: "Chrome",
            variant: "override",
          },
        ],
      },
    ],
  },
  {
    id: "ZGk6TWR0qgO9",
    name: "Google Source",
    projectId: "pKnDSUf6hHdKMbSuzompSH",
    externalId: null,
    description: null,
    pagesPaths: ["/_splits/home"],
    type: "segment",
    slices: [
      { id: "29lX2xZMUda5", externalId: null, cond: {}, contents: [] },
      {
        id: "qTmyxO6BBxew",
        externalId: null,
        cond: { and: [{ "==": [{ var: "utm_source" }, "google"] }] },
        contents: [
          {
            type: "global-variant",
            projectId: "pKnDSUf6hHdKMbSuzompSH",
            groupId: "tAgF8lNmfePw",
            group: "GoogleSource",
            variant: "override",
          },
        ],
      },
    ],
  },
  {
    id: "g_jPbIB9Ti5Z",
    name: "Button Type",
    projectId: "pKnDSUf6hHdKMbSuzompSH",
    externalId: null,
    description: null,
    pagesPaths: ["/_splits/abtest"],
    type: "experiment",
    slices: [
      { id: "j4u6fJhNZ1Os", externalId: null, prob: 0.5, contents: [] },
      {
        id: "pOjreSZ32iz3",
        externalId: null,
        prob: 0.5,
        contents: [
          {
            type: "global-variant",
            projectId: "pKnDSUf6hHdKMbSuzompSH",
            groupId: "C8lCX5Vidzec",
            group: "ButtonType",
            variant: "dashed",
          },
        ],
      },
    ],
  },
];

export function getGlobalContextValueFromVariation(
  groupId: string,
  variation: Record<string, string>
) {
  let groupValue: string | undefined = undefined;
  Object.keys(variation).forEach((variationKey: string) => {
    const [_type, splitId] = variationKey.split(".");
    const sliceId = variation[variationKey];
    const split = splits.find(
      (s) => s.id === splitId || s.externalId === splitId
    );
    if (split) {
      const slice = split.slices.find(
        (s) => s.id === sliceId || s.externalId === sliceId
      );
      if (slice) {
        const content = slice.contents.find((c) => c.groupId === groupId);
        if (content) {
          groupValue = content.variant;
        }
      }
    }
  });
  return groupValue;
}

export default function PlasmicSplitsProvider(
  props: PlasmicSplitsProviderProps
) {
  const { children, traits, ...rest } = props;
  const variation = getActiveVariation({
    splits,
    traits: traits ?? {},
    ...rest,
  });

  return (
    <>
      <ButtonTypeContextProvider
        value={getGlobalContextValueFromVariation("C8lCX5Vidzec", variation)}
      >
        <GoogleSourceContextProvider
          value={getGlobalContextValueFromVariation("tAgF8lNmfePw", variation)}
        >
          <ChromeContextProvider
            value={getGlobalContextValueFromVariation(
              "Gf4pcnBTgIuU",
              variation
            )}
          >
            {children}
          </ChromeContextProvider>
        </GoogleSourceContextProvider>
      </ButtonTypeContextProvider>
    </>
  );
}
