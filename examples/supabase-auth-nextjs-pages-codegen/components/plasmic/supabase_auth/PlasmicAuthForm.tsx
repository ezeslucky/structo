// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2gYaa1FsuykK8CmmDLsakd
// Component: 7DjV0doeRl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_supabase_auth.module.css"; // plasmic-import: 2gYaa1FsuykK8CmmDLsakd/projectcss
import sty from "./PlasmicAuthForm.module.css"; // plasmic-import: 7DjV0doeRl/css

export type PlasmicAuthForm__VariantMembers = {
  mode: "signIn" | "signUp" | "checkEmail";
};
export type PlasmicAuthForm__VariantsArgs = {
  mode?: SingleChoiceArg<"signIn" | "signUp" | "checkEmail">;
};
type VariantPropType = keyof PlasmicAuthForm__VariantsArgs;
export const PlasmicAuthForm__VariantProps = new Array<VariantPropType>("mode");

export type PlasmicAuthForm__ArgsType = {
  handleSubmit?: (mode: string, credentials: any) => void;
};
type ArgPropType = keyof PlasmicAuthForm__ArgsType;
export const PlasmicAuthForm__ArgProps = new Array<ArgPropType>("handleSubmit");

export type PlasmicAuthForm__OverridesType = {
  root?: p.Flex<"div">;
  credentialsForm?: p.Flex<typeof FormWrapper>;
  button?: p.Flex<typeof AntdButton>;
};

export interface DefaultAuthFormProps {
  handleSubmit?: (mode: string, credentials: any) => void;
  mode?: SingleChoiceArg<"signIn" | "signUp" | "checkEmail">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthForm__RenderFunc(props: {
  variants: PlasmicAuthForm__VariantsArgs;
  args: PlasmicAuthForm__ArgsType;
  overrides: PlasmicAuthForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "credentialsForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: "currentMode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "signIn" as const,
      },
      {
        path: "mode",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.currentMode;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.mode,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootmode_checkEmail]: hasVariant($state, "mode", "checkEmail"),
          [sty.rootmode_signIn]: hasVariant($state, "mode", "signIn"),
          [sty.rootmode_signUp]: hasVariant($state, "mode", "signUp"),
        }
      )}
    >
      {(hasVariant($state, "mode", "checkEmail") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__d5CtH, {
            [sty.freeBoxmode_checkEmail__d5CtHlgoMo]: hasVariant(
              $state,
              "mode",
              "checkEmail"
            ),
          })}
        >
          <FormWrapper
            data-plasmic-name={"credentialsForm"}
            data-plasmic-override={overrides.credentialsForm}
            className={classNames("__wab_instance", sty.credentialsForm, {
              [sty.credentialsFormmode_signUp]: hasVariant(
                $state,
                "mode",
                "signUp"
              ),
            })}
            extendedOnValuesChange={p.generateStateOnChangeProp($state, [
              "credentialsForm",
              "value",
            ])}
            formItems={(() => {
              const __composite = [
                { label: null, name: null, inputType: "Text" },
                { label: null, name: null, inputType: null },
              ];
              __composite["0"]["label"] = "Email";
              __composite["0"]["name"] = "email";
              __composite["1"]["label"] = "Password";
              __composite["1"]["name"] = "password";
              __composite["1"]["inputType"] = "Password";
              return __composite;
            })()}
            labelCol={{ span: 8, horizontalOnly: true }}
            layout={"vertical" as const}
            mode={"simplified" as const}
            onFinish={async (values) => {
              const $steps = {};
              $steps["runHandleSubmit"] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "invokeEventHandler",
                          interactionUuid: "HMp2vbz-c",
                          componentUuid: "7DjV0doeRl",
                          argName: "eventRef",
                        },
                        () => $props["handleSubmit"]
                      ),
                      args: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "invokeEventHandler",
                          interactionUuid: "HMp2vbz-c",
                          componentUuid: "7DjV0doeRl",
                          argName: "args",
                        },
                        () => [
                          (() => {
                            try {
                              return $state.currentMode;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return $state.credentialsForm.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                        ]
                      ),
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "invokeEventHandler",
                        interactionUuid: "HMp2vbz-c",
                        componentUuid: "7DjV0doeRl",
                      },
                      () =>
                        (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["runHandleSubmit"] === "object" &&
                typeof $steps["runHandleSubmit"].then === "function"
              ) {
                $steps["runHandleSubmit"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "invokeEventHandler",
                    interactionUuid: "HMp2vbz-c",
                    componentUuid: "7DjV0doeRl",
                  },
                  $steps["runHandleSubmit"]
                );
              }
              $steps["updateCurrentMode"] =
                $state.currentMode === "signUp"
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "MG_kmOESL",
                            componentUuid: "7DjV0doeRl",
                            argName: "variable",
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["currentMode"],
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "MG_kmOESL",
                            componentUuid: "7DjV0doeRl",
                            argName: "operation",
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "MG_kmOESL",
                            componentUuid: "7DjV0doeRl",
                            argName: "value",
                          },
                          () => "checkEmail"
                        ),
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "MG_kmOESL",
                          componentUuid: "7DjV0doeRl",
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
              if (
                typeof $steps["updateCurrentMode"] === "object" &&
                typeof $steps["updateCurrentMode"].then === "function"
              ) {
                $steps["updateCurrentMode"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "MG_kmOESL",
                    componentUuid: "7DjV0doeRl",
                  },
                  $steps["updateCurrentMode"]
                );
              }
            }}
            submitSlot={
              <AntdButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button, {
                  [sty.buttonmode_signUp]: hasVariant($state, "mode", "signUp"),
                })}
                submitsForm={true}
                type={"primary" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5BwqH,
                    {
                      [sty.textmode_signUp___5BwqHjz8Vi]: hasVariant(
                        $state,
                        "mode",
                        "signUp"
                      ),
                    }
                  )}
                >
                  {hasVariant($state, "mode", "signUp") ? "Sign Up" : "Sign In"}
                </div>
              </AntdButton>
            }
            wrapperCol={{ span: 16, horizontalOnly: true }}
          />

          {true ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__iNw4V, {
                [sty.freeBoxmode_checkEmail__iNw4VLgoMo]: hasVariant(
                  $state,
                  "mode",
                  "checkEmail"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w7Uv1,
                  {
                    [sty.textmode_signUp__w7Uv1Jz8Vi]: hasVariant(
                      $state,
                      "mode",
                      "signUp"
                    ),
                  }
                )}
                onClick={async (event) => {
                  const $steps = {};
                  $steps["updateCurrentMode"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "LeYPH3lj1",
                              componentUuid: "7DjV0doeRl",
                              argName: "variable",
                            },
                            () => ({
                              objRoot: $state,
                              variablePath: ["currentMode"],
                            })
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "LeYPH3lj1",
                              componentUuid: "7DjV0doeRl",
                              argName: "operation",
                            },
                            () => 0
                          ),
                          value: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "LeYPH3lj1",
                              componentUuid: "7DjV0doeRl",
                              argName: "value",
                            },
                            () =>
                              $state.currentMode === "signIn"
                                ? "signUp"
                                : $state.currentMode === "signUp"
                                ? "signIn"
                                : "checkEmail"
                          ),
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "LeYPH3lj1",
                            componentUuid: "7DjV0doeRl",
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              p.set(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["updateCurrentMode"] === "object" &&
                    typeof $steps["updateCurrentMode"].then === "function"
                  ) {
                    $steps["updateCurrentMode"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "LeYPH3lj1",
                        componentUuid: "7DjV0doeRl",
                      },
                      $steps["updateCurrentMode"]
                    );
                  }
                }}
              >
                {hasVariant($state, "mode", "signUp")
                  ? "Already have an account? Sign In Now"
                  : "Don't have an account? Sign Up Now"}
              </div>
            </div>
          ) : null}
        </div>
      ) : null}
      {(hasVariant($state, "mode", "checkEmail") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__vvWsg, {
            [sty.freeBoxmode_checkEmail__vvWsglgoMo]: hasVariant(
              $state,
              "mode",
              "checkEmail"
            ),
          })}
        >
          {(hasVariant($state, "mode", "checkEmail") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uXtCy,
                {
                  [sty.textmode_checkEmail__uXtCylgoMo]: hasVariant(
                    $state,
                    "mode",
                    "checkEmail"
                  ),
                }
              )}
            >
              {"Check your email"}
            </div>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "credentialsForm", "button"],
  credentialsForm: ["credentialsForm", "button"],
  button: ["button"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  credentialsForm: typeof FormWrapper;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthForm__VariantsArgs;
    args?: PlasmicAuthForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuthForm__ArgProps,
          internalVariantPropNames: PlasmicAuthForm__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicAuthForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthForm";
  } else {
    func.displayName = `PlasmicAuthForm.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthForm = Object.assign(
  // Top-level PlasmicAuthForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    credentialsForm: makeNodeComponent("credentialsForm"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAuthForm
    internalVariantProps: PlasmicAuthForm__VariantProps,
    internalArgProps: PlasmicAuthForm__ArgProps,
  }
);

export default PlasmicAuthForm;
/* prettier-ignore-end */
