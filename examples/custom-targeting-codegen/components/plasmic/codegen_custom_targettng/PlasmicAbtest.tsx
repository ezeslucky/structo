/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pKnDSUf6hHdKMbSuzompSH
// Component: 3d8o-GSwQEqG

import * as React from "react";

import Head from "next/head";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useCurrentUser,
} from "@plasmicapp/react-web";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import PageLayout from "../../PageLayout"; // plasmic-import: _BlCShYS9xHe/component

import { useButtonType } from "./PlasmicGlobalVariant__ButtonType"; // plasmic-import: C8lCX5Vidzec/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_codegen_custom_targettng.module.css"; // plasmic-import: pKnDSUf6hHdKMbSuzompSH/projectcss
import sty from "./PlasmicAbtest.module.css"; // plasmic-import: 3d8o-GSwQEqG/css

createPlasmicElementProxy;

export type PlasmicAbtest__VariantMembers = {};
export type PlasmicAbtest__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbtest__VariantsArgs;
export const PlasmicAbtest__VariantProps = new Array<VariantPropType>();

export type PlasmicAbtest__ArgsType = { plasmicSeed?: string };
type ArgPropType = keyof PlasmicAbtest__ArgsType;
export const PlasmicAbtest__ArgProps = new Array<ArgPropType>("plasmicSeed");

export type PlasmicAbtest__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  button?: Flex__<typeof AntdButton>;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  h3?: Flex__<"h3">;
};

export interface DefaultAbtestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbtest__RenderFunc(props: {
  variants: PlasmicAbtest__VariantsArgs;
  args: PlasmicAbtest__ArgsType;
  overrides: PlasmicAbtest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          plasmicSeed: "0",
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    buttonType: useButtonType(),
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_buttonType_dashed]: hasVariant(
                globalVariants,
                "buttonType",
                "dashed"
              ),
            }
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {($ctx) => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Which button do you see? Primary or Dashed?"}
                  </h1>
                  <AntdButton
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button, {
                      [sty.buttonglobal_buttonType_dashed]: hasVariant(
                        globalVariants,
                        "buttonType",
                        "dashed"
                      ),
                    })}
                    onClick={async () => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  document.cookie =
                                    "plasmic_seed=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
                                  return location.reload();
                                })();
                              },
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    size={"large"}
                    type={
                      hasVariant(globalVariants, "buttonType", "dashed")
                        ? "dashed"
                        : "primary"
                    }
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Try again"}
                    </div>
                  </AntdButton>
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <h3
                      data-plasmic-name={"h3"}
                      data-plasmic-override={overrides.h3}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `Your seed is: ${$props.plasmicSeed}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h3>
                  </div>
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "button",
    "text",
    "freeBox",
    "h3",
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "button",
    "text",
    "freeBox",
    "h3",
  ],
  section: ["section", "h1", "button", "text", "freeBox", "h3"],
  h1: ["h1"],
  button: ["button", "text"],
  text: ["text"],
  freeBox: ["freeBox", "h3"],
  h3: ["h3"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h1: "h1";
  button: typeof AntdButton;
  text: "div";
  freeBox: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbtest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbtest__VariantsArgs;
    args?: PlasmicAbtest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbtest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAbtest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAbtest__ArgProps,
          internalVariantPropNames: PlasmicAbtest__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicAbtest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbtest";
  } else {
    func.displayName = `PlasmicAbtest.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = (props) => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "pKnDSUf6hHdKMbSuzompSH",
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user,
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAbtest = Object.assign(
  // Top-level PlasmicAbtest renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicAbtest
    internalVariantProps: PlasmicAbtest__VariantProps,
    internalArgProps: PlasmicAbtest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicAbtest;
/* prettier-ignore-end */
